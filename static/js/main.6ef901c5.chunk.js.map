{"version":3,"sources":["assets/background-image.jpg","pages/WelcomePage.js","pages/LoungePage.js","pages/CreateBoardPage.js","pages/PaperBoardPage.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","WelcomePage","className","to","LoungePage","CreateBoardPage","PaperBoardPage","Boolean","window","location","hostname","match","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,8C,8GCG5B,SAASC,IACpB,OACI,yBAAKC,UAAU,aACX,4CACA,2BACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,qBADJ,YCJG,SAASC,IAEpB,OACI,yBAAKF,UAAU,aACX,2CACA,2BACI,kBAAC,IAAD,CAAMC,GAAG,cAAT,2BADJ,aAEI,kBAAC,IAAD,CAAMA,GAAI,mCAAV,iCAFJ,mBCLG,SAASE,IACpB,OACI,yBAAKH,UAAU,aACX,iDACA,2BACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,uBADJ,iBCJG,SAASG,IACpB,OACI,yBAAKJ,UAAU,aACX,uDACA,2BACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,uBADJ,iB,YCKQI,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVvCC,iBACI,kBAAC,IAAD,CAAeC,SAAUC,qBACrB,mBCAO,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,KAAK,UAAUC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,aAAaC,UAAWZ,IACpC,kBAAC,IAAD,CAAOW,KAAK,qBAAqBC,UAAWX,ODNhD,OAEJY,SAASC,eAAe,SDkHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAChCA,EAAaC,kB","file":"static/js/main.6ef901c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background-image.1419a925.jpg\";","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function WelcomePage() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Welcome Page</h1>\r\n            <p>\r\n                <Link to=\"/lounge\">Go to Lounge page</Link> youpi.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function LoungePage() {\r\n    const defaultBoardTitle = \"default-paper-board\";\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Lounge Page</h1>\r\n            <p>\r\n                <Link to=\"/new-board\">Go to Create Board page</Link> youpihou.\r\n                <Link to={\"/paperboard/\" + defaultBoardTitle}>Go to Default PaperBoard page</Link>\r\n                youpioulalala.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function CreateBoardPage() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Create Board Page</h1>\r\n            <p>\r\n                <Link to=\"/lounge\">Back to Lounge page</Link> aaaaahh....\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function PaperBoardPage() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Default PaperBoard Page</h1>\r\n            <p>\r\n                <Link to=\"/lounge\">Back to Lounge page</Link> oooohhh....\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\nimport {render} from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport WelcomePage from \"./pages/WelcomePage\";\r\nimport LoungePage from \"./pages/LoungePage\";\r\nimport CreateBoardPage from \"./pages/CreateBoardPage\";\r\nimport PaperBoardPage from \"./pages/PaperBoardPage\";\r\nimport * as backgroundImage from \"./assets/background-image.jpg\";\r\nimport \"./App.scss\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={WelcomePage} />\r\n            <Route path=\"/lounge\" component={LoungePage} />\r\n            <Route path=\"/new-board\" component={CreateBoardPage} />\r\n            <Route path=\"/paperboard/:title\" component={PaperBoardPage} />\r\n        </Switch>\r\n    );\r\n}\r\n"],"sourceRoot":""}